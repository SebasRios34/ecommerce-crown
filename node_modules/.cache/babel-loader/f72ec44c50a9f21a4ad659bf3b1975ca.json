{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { async } from \"@firebase/util\";\nimport { initializeApp } from \"firebase/app\"; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc, collection, writeBatch } from \"firebase/firestore\"; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDE4KVrtKTRD1ibLQz2MFdA1y5JXaHFp6Q\",\n  authDomain: \"ecommerce-crown-db-b4748.firebaseapp.com\",\n  projectId: \"ecommerce-crown-db-b4748\",\n  storageBucket: \"ecommerce-crown-db-b4748.appspot.com\",\n  messagingSenderId: \"1041666930609\",\n  appId: \"1:1041666930609:web:4e9944df6cfd46efe2ef90\"\n}; // Initialize Firebase\n\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider(); //select_account --> everytime a user interacts with the page needs to sign-in\n\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\n/* Sign-In Options */\n\nexport const auth = getAuth();\n/* Sing-In using Google Popup \n  creates the sign-in with popup needs (auth, provider)\n*/\n\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n/* Sing-In using Google Redirect \n  creates the sign-in with popup needs (auth, provider)\n*/\n\nexport const signInwithGoogleRedirect = () => signInWithRedirect(auth, provider);\n/* Database Configuration */\n\nexport const db = getFirestore();\nexport const addColletionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = collection(db, collectionKey);\n};\n/* Create User from Sign-In \n  userAuth is the user data grabbed from the Sign-In Popup\n  */\n\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return; //Initializing User References with doc(name of getFirestore, collection name, unique ID)\n\n  const userDocRef = doc(db, \"users\", userAuth.uid); //Snapshot help us retrieve data from a user reference\n\n  const userSnapshot = await getDoc(userDocRef); //if user does not exist... create user\n\n  if (!userSnapshot.exists()) {\n    //data grabbed from user data authetication\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      //create user using setDoc(document reference, {name, email, date created})\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n\n  return userDocRef;\n};\n/* Create user using email and password*/\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => {\n  await signOut(auth);\n};\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback);","map":{"version":3,"names":["async","initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","collection","writeBatch","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInwithGoogleRedirect","db","addColletionAndDocuments","collectionKey","objectsToAdd","collectionRef","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback"],"sources":["/Users/sebasrios/Documents/React-Course/capstone/crwn-clothing/ecommerce-crown/src/utils/firebase/firebase.utils.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { async } from \"@firebase/util\";\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n} from \"firebase/auth\";\n\nimport {\n  getFirestore,\n  doc,\n  getDoc,\n  setDoc,\n  collection,\n  writeBatch,\n} from \"firebase/firestore\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDE4KVrtKTRD1ibLQz2MFdA1y5JXaHFp6Q\",\n  authDomain: \"ecommerce-crown-db-b4748.firebaseapp.com\",\n  projectId: \"ecommerce-crown-db-b4748\",\n  storageBucket: \"ecommerce-crown-db-b4748.appspot.com\",\n  messagingSenderId: \"1041666930609\",\n  appId: \"1:1041666930609:web:4e9944df6cfd46efe2ef90\",\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider();\n//select_account --> everytime a user interacts with the page needs to sign-in\nprovider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\n/* Sign-In Options */\nexport const auth = getAuth();\n/* Sing-In using Google Popup \n  creates the sign-in with popup needs (auth, provider)\n*/\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n\n/* Sing-In using Google Redirect \n  creates the sign-in with popup needs (auth, provider)\n*/\nexport const signInwithGoogleRedirect = () =>\n  signInWithRedirect(auth, provider);\n\n/* Database Configuration */\nexport const db = getFirestore();\n\nexport const addColletionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = collection(db, collectionKey);\n};\n\n/* Create User from Sign-In \n  userAuth is the user data grabbed from the Sign-In Popup\n  */\nexport const createUserDocumentFromAuth = async (\n  userAuth,\n  additionalInformation = {}\n) => {\n  if (!userAuth) return;\n  //Initializing User References with doc(name of getFirestore, collection name, unique ID)\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n\n  //Snapshot help us retrieve data from a user reference\n  const userSnapshot = await getDoc(userDocRef);\n\n  //if user does not exist... create user\n  if (!userSnapshot.exists()) {\n    //data grabbed from user data authetication\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      //create user using setDoc(document reference, {name, email, date created})\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation,\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n\n  return userDocRef;\n};\n\n/* Create user using email and password*/\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await signInWithEmailAndPassword(auth, email, password);\n};\n\nexport const signOutUser = async () => {\n  await signOut(auth);\n};\n\nexport const onAuthStateChangedListener = (callback) =>\n  onAuthStateChanged(auth, callback);\n"],"mappings":"AAAA;AACA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAASC,aAAT,QAA8B,cAA9B,C,CACA;AACA;;AACA,SACEC,OADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,kBAJF,EAKEC,8BALF,EAMEC,0BANF,EAOEC,OAPF,EAQEC,kBARF,QASO,eATP;AAWA,SACEC,YADF,EAEEC,GAFF,EAGEC,MAHF,EAIEC,MAJF,EAKEC,UALF,EAMEC,UANF,QAOO,oBAPP,C,CASA;;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCADa;EAErBC,UAAU,EAAE,0CAFS;EAGrBC,SAAS,EAAE,0BAHU;EAIrBC,aAAa,EAAE,sCAJM;EAKrBC,iBAAiB,EAAE,eALE;EAMrBC,KAAK,EAAE;AANc,CAAvB,C,CASA;;AACA,MAAMC,WAAW,GAAGtB,aAAa,CAACe,cAAD,CAAjC;AAEA,MAAMQ,QAAQ,GAAG,IAAInB,kBAAJ,EAAjB,C,CACA;;AACAmB,QAAQ,CAACC,mBAAT,CAA6B;EAC3BC,MAAM,EAAE;AADmB,CAA7B;AAIA;;AACA,OAAO,MAAMC,IAAI,GAAGzB,OAAO,EAApB;AACP;AACA;AACA;;AACA,OAAO,MAAM0B,qBAAqB,GAAG,MAAMxB,eAAe,CAACuB,IAAD,EAAOH,QAAP,CAAnD;AAEP;AACA;AACA;;AACA,OAAO,MAAMK,wBAAwB,GAAG,MACtC1B,kBAAkB,CAACwB,IAAD,EAAOH,QAAP,CADb;AAGP;;AACA,OAAO,MAAMM,EAAE,GAAGpB,YAAY,EAAvB;AAEP,OAAO,MAAMqB,wBAAwB,GAAG,OAAOC,aAAP,EAAsBC,YAAtB,KAAuC;EAC7E,MAAMC,aAAa,GAAGpB,UAAU,CAACgB,EAAD,EAAKE,aAAL,CAAhC;AACD,CAFM;AAIP;AACA;AACA;;AACA,OAAO,MAAMG,0BAA0B,GAAG,gBACxCC,QADwC,EAGrC;EAAA,IADHC,qBACG,uEADqB,EACrB;EACH,IAAI,CAACD,QAAL,EAAe,OADZ,CAEH;;EACA,MAAME,UAAU,GAAG3B,GAAG,CAACmB,EAAD,EAAK,OAAL,EAAcM,QAAQ,CAACG,GAAvB,CAAtB,CAHG,CAKH;;EACA,MAAMC,YAAY,GAAG,MAAM5B,MAAM,CAAC0B,UAAD,CAAjC,CANG,CAQH;;EACA,IAAI,CAACE,YAAY,CAACC,MAAb,EAAL,EAA4B;IAC1B;IACA,MAAM;MAAEC,WAAF;MAAeC;IAAf,IAAyBP,QAA/B;IACA,MAAMQ,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;IAEA,IAAI;MACF;MACA,MAAMhC,MAAM,CAACyB,UAAD,EAAa;QACvBI,WADuB;QAEvBC,KAFuB;QAGvBC,SAHuB;QAIvB,GAAGP;MAJoB,CAAb,CAAZ;IAMD,CARD,CAQE,OAAOS,KAAP,EAAc;MACdC,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,KAAK,CAACG,OAA7C;IACD;EACF;;EAED,OAAOX,UAAP;AACD,CA/BM;AAiCP;;AACA,OAAO,MAAMY,kCAAkC,GAAG,OAAOP,KAAP,EAAcQ,QAAd,KAA2B;EAC3E,IAAI,CAACR,KAAD,IAAU,CAACQ,QAAf,EAAyB;EAEzB,OAAO,MAAM7C,8BAA8B,CAACqB,IAAD,EAAOgB,KAAP,EAAcQ,QAAd,CAA3C;AACD,CAJM;AAMP,OAAO,MAAMC,kCAAkC,GAAG,OAAOT,KAAP,EAAcQ,QAAd,KAA2B;EAC3E,IAAI,CAACR,KAAD,IAAU,CAACQ,QAAf,EAAyB;EAEzB,OAAO,MAAM5C,0BAA0B,CAACoB,IAAD,EAAOgB,KAAP,EAAcQ,QAAd,CAAvC;AACD,CAJM;AAMP,OAAO,MAAME,WAAW,GAAG,YAAY;EACrC,MAAM7C,OAAO,CAACmB,IAAD,CAAb;AACD,CAFM;AAIP,OAAO,MAAM2B,0BAA0B,GAAIC,QAAD,IACxC9C,kBAAkB,CAACkB,IAAD,EAAO4B,QAAP,CADb"},"metadata":{},"sourceType":"module"}