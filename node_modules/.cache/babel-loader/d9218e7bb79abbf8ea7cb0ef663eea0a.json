{"ast":null,"code":"var _jsxFileName = \"/Users/sebasrios/Documents/React-Course/capstone/crwn-clothing/ecommerce-crown/src/context/user.context.jsx\",\n    _s = $RefreshSig$();\n\n/* React Context allow us to use and store data between components*/\nimport { createContext, useEffect, useReducer } from \"react\";\nimport { onAuthStateChangedListener, createUserDocumentFromAuth } from \"../utils/firebase/firebase.utils\"; //as the actual value you want to access\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext({\n  currentUser: null,\n  setCurrentUser: () => null\n});\nexport const USER_ACTION_TYPES = {\n  SET_CURRENT_USER: \"SET_CURRENT_USER\"\n};\nconst INITIAL_STATE = {\n  currentUser: null\n};\n\nconst userReducer = (state, action) => {\n  console.log(\"dispatched\");\n  console.log(action);\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case USER_ACTION_TYPES.SET_CURRENT_USER:\n      return { ...state,\n        currentUser: payload\n      };\n\n    default:\n      throw new Error(`Unhandled type ${type} in userReducer`);\n  }\n}; //This is the component itself normally wrapped around the <App /> component\n\n\nexport const UserProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //const [currentUser, setCurrentUser] = useState(null);\n  const [state, dispatch] = useReducer(userReducer, INITIAL_STATE);\n  const {\n    currentUser\n  } = state;\n  console.log(currentUser);\n\n  const setCurrentUser = user => {\n    dispatch({\n      type: USER_ACTION_TYPES.SET_CURRENT_USER,\n      payload: user\n    });\n  };\n\n  const value = {\n    currentUser,\n    setCurrentUser\n  }; //here we are centralizing the need of calling setCurrentUser and createUserDocumentFromAuth in all the different components.\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChangedListener(user => {\n      if (user) {\n        createUserDocumentFromAuth(user);\n      }\n\n      setCurrentUser(user);\n    });\n    return unsubscribe;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n\n_s(UserProvider, \"zpn/kx5Q6O+5t2dWmjRtda+kHzA=\");\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["createContext","useEffect","useReducer","onAuthStateChangedListener","createUserDocumentFromAuth","UserContext","currentUser","setCurrentUser","USER_ACTION_TYPES","SET_CURRENT_USER","INITIAL_STATE","userReducer","state","action","console","log","type","payload","Error","UserProvider","children","dispatch","user","value","unsubscribe"],"sources":["/Users/sebasrios/Documents/React-Course/capstone/crwn-clothing/ecommerce-crown/src/context/user.context.jsx"],"sourcesContent":["/* React Context allow us to use and store data between components*/\nimport { createContext, useEffect, useReducer } from \"react\";\n\nimport {\n  onAuthStateChangedListener,\n  createUserDocumentFromAuth,\n} from \"../utils/firebase/firebase.utils\";\n\n//as the actual value you want to access\nexport const UserContext = createContext({\n  currentUser: null,\n  setCurrentUser: () => null,\n});\n\nexport const USER_ACTION_TYPES = {\n  SET_CURRENT_USER: \"SET_CURRENT_USER\",\n};\n\nconst INITIAL_STATE = {\n  currentUser: null,\n};\n\nconst userReducer = (state, action) => {\n  console.log(\"dispatched\");\n  console.log(action);\n  const { type, payload } = action;\n\n  switch (type) {\n    case USER_ACTION_TYPES.SET_CURRENT_USER:\n      return {\n        ...state,\n        currentUser: payload,\n      };\n    default:\n      throw new Error(`Unhandled type ${type} in userReducer`);\n  }\n};\n\n//This is the component itself normally wrapped around the <App /> component\nexport const UserProvider = ({ children }) => {\n  //const [currentUser, setCurrentUser] = useState(null);\n  const [state, dispatch] = useReducer(userReducer, INITIAL_STATE);\n  const { currentUser } = state;\n  console.log(currentUser);\n\n  const setCurrentUser = (user) => {\n    dispatch({ type: USER_ACTION_TYPES.SET_CURRENT_USER, payload: user });\n  };\n\n  const value = { currentUser, setCurrentUser };\n\n  //here we are centralizing the need of calling setCurrentUser and createUserDocumentFromAuth in all the different components.\n  useEffect(() => {\n    const unsubscribe = onAuthStateChangedListener((user) => {\n      if (user) {\n        createUserDocumentFromAuth(user);\n      }\n      setCurrentUser(user);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;\n};\n"],"mappings":";;;AAAA;AACA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,UAAnC,QAAqD,OAArD;AAEA,SACEC,0BADF,EAEEC,0BAFF,QAGO,kCAHP,C,CAKA;;;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC;EACvCM,WAAW,EAAE,IAD0B;EAEvCC,cAAc,EAAE,MAAM;AAFiB,CAAD,CAAjC;AAKP,OAAO,MAAMC,iBAAiB,GAAG;EAC/BC,gBAAgB,EAAE;AADa,CAA1B;AAIP,MAAMC,aAAa,GAAG;EACpBJ,WAAW,EAAE;AADO,CAAtB;;AAIA,MAAMK,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACrCC,OAAO,CAACC,GAAR,CAAY,YAAZ;EACAD,OAAO,CAACC,GAAR,CAAYF,MAAZ;EACA,MAAM;IAAEG,IAAF;IAAQC;EAAR,IAAoBJ,MAA1B;;EAEA,QAAQG,IAAR;IACE,KAAKR,iBAAiB,CAACC,gBAAvB;MACE,OAAO,EACL,GAAGG,KADE;QAELN,WAAW,EAAEW;MAFR,CAAP;;IAIF;MACE,MAAM,IAAIC,KAAJ,CAAW,kBAAiBF,IAAK,iBAAjC,CAAN;EAPJ;AASD,CAdD,C,CAgBA;;;AACA,OAAO,MAAMG,YAAY,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC5C;EACA,MAAM,CAACR,KAAD,EAAQS,QAAR,IAAoBnB,UAAU,CAACS,WAAD,EAAcD,aAAd,CAApC;EACA,MAAM;IAAEJ;EAAF,IAAkBM,KAAxB;EACAE,OAAO,CAACC,GAAR,CAAYT,WAAZ;;EAEA,MAAMC,cAAc,GAAIe,IAAD,IAAU;IAC/BD,QAAQ,CAAC;MAAEL,IAAI,EAAER,iBAAiB,CAACC,gBAA1B;MAA4CQ,OAAO,EAAEK;IAArD,CAAD,CAAR;EACD,CAFD;;EAIA,MAAMC,KAAK,GAAG;IAAEjB,WAAF;IAAeC;EAAf,CAAd,CAV4C,CAY5C;;EACAN,SAAS,CAAC,MAAM;IACd,MAAMuB,WAAW,GAAGrB,0BAA0B,CAAEmB,IAAD,IAAU;MACvD,IAAIA,IAAJ,EAAU;QACRlB,0BAA0B,CAACkB,IAAD,CAA1B;MACD;;MACDf,cAAc,CAACe,IAAD,CAAd;IACD,CAL6C,CAA9C;IAOA,OAAOE,WAAP;EACD,CATQ,EASN,EATM,CAAT;EAWA,oBAAO,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAED,KAA7B;IAAA,UAAqCH;EAArC;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAzBM;;GAAMD,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}