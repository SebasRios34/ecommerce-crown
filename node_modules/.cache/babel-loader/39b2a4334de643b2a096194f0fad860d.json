{"ast":null,"code":"import { initializeApp } from \"firebase/app\"; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc, collection, writeBatch, query, getDocs } from \"firebase/firestore\"; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDE4KVrtKTRD1ibLQz2MFdA1y5JXaHFp6Q\",\n  authDomain: \"ecommerce-crown-db-b4748.firebaseapp.com\",\n  projectId: \"ecommerce-crown-db-b4748\",\n  storageBucket: \"ecommerce-crown-db-b4748.appspot.com\",\n  messagingSenderId: \"1041666930609\",\n  appId: \"1:1041666930609:web:4e9944df6cfd46efe2ef90\"\n}; // Initialize Firebase\n//const firebaseApp = initializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider(); //select_account --> everytime a user interacts with the page needs to sign-in\n\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\n/* Sign-In Options */\n\nexport const auth = getAuth();\n/* Sing-In using Google Popup \n  creates the sign-in with popup needs (auth, provider)\n*/\n\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n/* Sing-In using Google Redirect \n  creates the sign-in with popup needs (auth, provider)\n*/\n\nexport const signInwithGoogleRedirect = () => signInWithRedirect(auth, provider);\n/* Database Configuration */\n\nexport const db = getFirestore(); //Use these method to create and populate collections in firebase database\n\nexport const addColletionAndDocuments = async (collectionKey, objectsToAdd, field) => {\n  const collectionRef = collection(db, collectionKey);\n  const batch = writeBatch(db);\n  objectsToAdd.forEach(object => {\n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n  await batch.commit();\n  console.log(\"done\");\n}; //get category and documents from firebase database\n\nexport const getCategoriesAndDocuments = async () => {\n  //grab reference from database with the collection key of 'categories'\n  const collectionRef = collection(db, \"categories\"); //create a query from that specified collection reference\n\n  const q = query(collectionRef); //snapshot help us retrieve data from a category reference\n\n  const querySnapshot = await getDocs(q);\n  const categoryMap = querySnapshot.docs.reduce((accumulator, docSnapshot) => {\n    const {\n      title,\n      items\n    } = docSnapshot.data(); //grab item from json and change the title to lowercase\n\n    accumulator[title.toLowerCase()] = items;\n    return accumulator;\n  }, {});\n  return categoryMap;\n};\n/* Create User from Sign-In \n  userAuth is the user data grabbed from the Sign-In Popup\n  */\n\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return; //Initializing User References with doc(name of getFirestore, collection name, unique ID)\n\n  const userDocRef = doc(db, \"users\", userAuth.uid); //Snapshot help us retrieve data from a user reference\n\n  const userSnapshot = await getDoc(userDocRef); //if user does not exist... create user\n\n  if (!userSnapshot.exists()) {\n    //data grabbed from user data authetication\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      //create user using setDoc(document reference, {name, email, date created})\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n\n  return userDocRef;\n};\n/* Create user using email and password*/\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => {\n  await signOut(auth);\n};\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback);","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","collection","writeBatch","query","getDocs","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInwithGoogleRedirect","db","addColletionAndDocuments","collectionKey","objectsToAdd","field","collectionRef","batch","forEach","object","docRef","title","toLowerCase","set","commit","console","log","getCategoriesAndDocuments","q","querySnapshot","categoryMap","docs","reduce","accumulator","docSnapshot","items","data","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback"],"sources":["/Users/sebasrios/Documents/React-Course/capstone/crwn-clothing/ecommerce-crown/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n} from \"firebase/auth\";\n\nimport {\n  getFirestore,\n  doc,\n  getDoc,\n  setDoc,\n  collection,\n  writeBatch,\n  query,\n  getDocs,\n} from \"firebase/firestore\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDE4KVrtKTRD1ibLQz2MFdA1y5JXaHFp6Q\",\n  authDomain: \"ecommerce-crown-db-b4748.firebaseapp.com\",\n  projectId: \"ecommerce-crown-db-b4748\",\n  storageBucket: \"ecommerce-crown-db-b4748.appspot.com\",\n  messagingSenderId: \"1041666930609\",\n  appId: \"1:1041666930609:web:4e9944df6cfd46efe2ef90\",\n};\n\n// Initialize Firebase\n//const firebaseApp = initializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider();\n//select_account --> everytime a user interacts with the page needs to sign-in\nprovider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\n/* Sign-In Options */\nexport const auth = getAuth();\n/* Sing-In using Google Popup \n  creates the sign-in with popup needs (auth, provider)\n*/\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n\n/* Sing-In using Google Redirect \n  creates the sign-in with popup needs (auth, provider)\n*/\nexport const signInwithGoogleRedirect = () =>\n  signInWithRedirect(auth, provider);\n\n/* Database Configuration */\nexport const db = getFirestore();\n\n//Use these method to create and populate collections in firebase database\nexport const addColletionAndDocuments = async (\n  collectionKey,\n  objectsToAdd,\n  field\n) => {\n  const collectionRef = collection(db, collectionKey);\n  const batch = writeBatch(db);\n\n  objectsToAdd.forEach((object) => {\n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n\n  await batch.commit();\n  console.log(\"done\");\n};\n\n//get category and documents from firebase database\nexport const getCategoriesAndDocuments = async () => {\n  //grab reference from database with the collection key of 'categories'\n  const collectionRef = collection(db, \"categories\");\n\n  //create a query from that specified collection reference\n  const q = query(collectionRef);\n\n  //snapshot help us retrieve data from a category reference\n  const querySnapshot = await getDocs(q);\n\n  const categoryMap = querySnapshot.docs.reduce((accumulator, docSnapshot) => {\n    const { title, items } = docSnapshot.data();\n    //grab item from json and change the title to lowercase\n    accumulator[title.toLowerCase()] = items;\n    return accumulator;\n  }, {});\n\n  return categoryMap;\n};\n/* Create User from Sign-In \n  userAuth is the user data grabbed from the Sign-In Popup\n  */\nexport const createUserDocumentFromAuth = async (\n  userAuth,\n  additionalInformation = {}\n) => {\n  if (!userAuth) return;\n  //Initializing User References with doc(name of getFirestore, collection name, unique ID)\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n\n  //Snapshot help us retrieve data from a user reference\n  const userSnapshot = await getDoc(userDocRef);\n\n  //if user does not exist... create user\n  if (!userSnapshot.exists()) {\n    //data grabbed from user data authetication\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      //create user using setDoc(document reference, {name, email, date created})\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation,\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n\n  return userDocRef;\n};\n\n/* Create user using email and password*/\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await signInWithEmailAndPassword(auth, email, password);\n};\n\nexport const signOutUser = async () => {\n  await signOut(auth);\n};\n\nexport const onAuthStateChangedListener = (callback) =>\n  onAuthStateChanged(auth, callback);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}