{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { async } from \"@firebase/util\";\nimport { initializeApp } from \"firebase/app\"; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\"; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDE4KVrtKTRD1ibLQz2MFdA1y5JXaHFp6Q\",\n  authDomain: \"ecommerce-crown-db-b4748.firebaseapp.com\",\n  projectId: \"ecommerce-crown-db-b4748\",\n  storageBucket: \"ecommerce-crown-db-b4748.appspot.com\",\n  messagingSenderId: \"1041666930609\",\n  appId: \"1:1041666930609:web:4e9944df6cfd46efe2ef90\"\n}; // Initialize Firebase\n\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider(); //select_account --> everytime a user interacts with the page needs to sign-in\n\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\n/* Sign-In Options */\n\nexport const auth = getAuth();\n/* Sing-In using Google Popup \n  creates the sign-in with popup needs (auth, provider)\n*/\n\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n/* Sing-In using Google Redirect \n  creates the sign-in with popup needs (auth, provider)\n*/\n\nexport const signInwithGoogleRedirect = () => signInWithRedirect(auth, provider);\n/* Database Configuration */\n\nexport const db = getFirestore();\n/* Create User from Sign-In \n  userAuth is the user data grabbed from the Sign-In Popup\n  */\n\nexport const createUserDocumentFromAuth = async userAuth => {\n  //Initializing User References with doc(name of getFirestore, collection name, unique ID)\n  const userDocRef = doc(db, \"users\", userAuth.uid); //Snapshot help us retrieve data from a user reference\n\n  const userSnapshot = await getDoc(userDocRef); //if user does not exist... create user\n\n  if (!userSnapshot.exists()) {\n    //data grabbed from user data authetication\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      //create user using setDoc(document reference, {name, email, date created})\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createAuthUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["async","initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInwithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password"],"sources":["/Users/sebasrios/Documents/React-Course/capstone/crwn-clothing/ecommerce-crown/src/utils/firebase/firebase.utils.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { async } from \"@firebase/util\";\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n} from \"firebase/auth\";\n\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDE4KVrtKTRD1ibLQz2MFdA1y5JXaHFp6Q\",\n  authDomain: \"ecommerce-crown-db-b4748.firebaseapp.com\",\n  projectId: \"ecommerce-crown-db-b4748\",\n  storageBucket: \"ecommerce-crown-db-b4748.appspot.com\",\n  messagingSenderId: \"1041666930609\",\n  appId: \"1:1041666930609:web:4e9944df6cfd46efe2ef90\",\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider();\n//select_account --> everytime a user interacts with the page needs to sign-in\nprovider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\n/* Sign-In Options */\nexport const auth = getAuth();\n/* Sing-In using Google Popup \n  creates the sign-in with popup needs (auth, provider)\n*/\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n\n/* Sing-In using Google Redirect \n  creates the sign-in with popup needs (auth, provider)\n*/\nexport const signInwithGoogleRedirect = () =>\n  signInWithRedirect(auth, provider);\n\n/* Database Configuration */\nexport const db = getFirestore();\n/* Create User from Sign-In \n  userAuth is the user data grabbed from the Sign-In Popup\n  */\nexport const createUserDocumentFromAuth = async (userAuth) => {\n  //Initializing User References with doc(name of getFirestore, collection name, unique ID)\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n\n  //Snapshot help us retrieve data from a user reference\n  const userSnapshot = await getDoc(userDocRef);\n\n  //if user does not exist... create user\n  if (!userSnapshot.exists()) {\n    //data grabbed from user data authetication\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      //create user using setDoc(document reference, {name, email, date created})\n      await setDoc(userDocRef, { displayName, email, createdAt });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n\n  return userDocRef;\n};\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await createAuthUserWithEmailAndPassword(auth, email, password);\n};\n"],"mappings":"AAAA;AACA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAASC,aAAT,QAA8B,cAA9B,C,CACA;AACA;;AACA,SACEC,OADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,kBAJF,EAKEC,8BALF,QAMO,eANP;AAQA,SAASC,YAAT,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,MAApC,QAAkD,oBAAlD,C,CAEA;;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCADa;EAErBC,UAAU,EAAE,0CAFS;EAGrBC,SAAS,EAAE,0BAHU;EAIrBC,aAAa,EAAE,sCAJM;EAKrBC,iBAAiB,EAAE,eALE;EAMrBC,KAAK,EAAE;AANc,CAAvB,C,CASA;;AACA,MAAMC,WAAW,GAAGjB,aAAa,CAACU,cAAD,CAAjC;AAEA,MAAMQ,QAAQ,GAAG,IAAId,kBAAJ,EAAjB,C,CACA;;AACAc,QAAQ,CAACC,mBAAT,CAA6B;EAC3BC,MAAM,EAAE;AADmB,CAA7B;AAIA;;AACA,OAAO,MAAMC,IAAI,GAAGpB,OAAO,EAApB;AACP;AACA;AACA;;AACA,OAAO,MAAMqB,qBAAqB,GAAG,MAAMnB,eAAe,CAACkB,IAAD,EAAOH,QAAP,CAAnD;AAEP;AACA;AACA;;AACA,OAAO,MAAMK,wBAAwB,GAAG,MACtCrB,kBAAkB,CAACmB,IAAD,EAAOH,QAAP,CADb;AAGP;;AACA,OAAO,MAAMM,EAAE,GAAGlB,YAAY,EAAvB;AACP;AACA;AACA;;AACA,OAAO,MAAMmB,0BAA0B,GAAG,MAAOC,QAAP,IAAoB;EAC5D;EACA,MAAMC,UAAU,GAAGpB,GAAG,CAACiB,EAAD,EAAK,OAAL,EAAcE,QAAQ,CAACE,GAAvB,CAAtB,CAF4D,CAI5D;;EACA,MAAMC,YAAY,GAAG,MAAMrB,MAAM,CAACmB,UAAD,CAAjC,CAL4D,CAO5D;;EACA,IAAI,CAACE,YAAY,CAACC,MAAb,EAAL,EAA4B;IAC1B;IACA,MAAM;MAAEC,WAAF;MAAeC;IAAf,IAAyBN,QAA/B;IACA,MAAMO,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;IAEA,IAAI;MACF;MACA,MAAMzB,MAAM,CAACkB,UAAD,EAAa;QAAEI,WAAF;QAAeC,KAAf;QAAsBC;MAAtB,CAAb,CAAZ;IACD,CAHD,CAGE,OAAOE,KAAP,EAAc;MACdC,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,KAAK,CAACG,OAA7C;IACD;EACF;;EAED,OAAOX,UAAP;AACD,CAtBM;AAwBP,OAAO,MAAMY,kCAAkC,GAAG,OAAOP,KAAP,EAAcQ,QAAd,KAA2B;EAC3E,IAAI,CAACR,KAAD,IAAU,CAACQ,QAAf,EAAyB;EAEzB,OAAO,MAAMD,kCAAkC,CAAClB,IAAD,EAAOW,KAAP,EAAcQ,QAAd,CAA/C;AACD,CAJM"},"metadata":{},"sourceType":"module"}